{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Response interceptor to handle errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  register: data => api.post('/auth/register', data).then(res => res.data),\n  login: data => api.post('/auth/login', data).then(res => res.data),\n  getCurrentUser: () => api.get('/auth/me').then(res => res.data)\n};\n\n// Events API\nexport const eventsAPI = {\n  getAll: params => api.get('/events', {\n    params\n  }).then(res => res.data),\n  getById: id => api.get(`/events/${id}`).then(res => res.data),\n  create: data => api.post('/events', data).then(res => res.data),\n  update: (id, data) => api.put(`/events/${id}`, data).then(res => res.data),\n  delete: id => api.delete(`/events/${id}`).then(res => res.data),\n  getCategories: () => api.get('/events/categories').then(res => res.data)\n};\n\n// Tickets API\nexport const ticketsAPI = {\n  getAll: params => api.get('/tickets', {\n    params\n  }).then(res => res.data),\n  getById: id => api.get(`/tickets/${id}`).then(res => res.data),\n  create: data => api.post('/tickets', data).then(res => res.data),\n  update: (id, data) => api.put(`/tickets/${id}`, data).then(res => res.data),\n  delete: id => api.delete(`/tickets/${id}`).then(res => res.data),\n  purchase: (id, data) => api.post(`/tickets/${id}/purchase`, data).then(res => res.data),\n  getMyTickets: () => api.get('/tickets/my').then(res => res.data),\n  getMyListings: () => api.get('/tickets/my-listings').then(res => res.data)\n};\n\n// Bids API\nexport const bidsAPI = {\n  placeBid: (ticketId, data) => api.post(`/bids/${ticketId}`, data).then(res => res.data),\n  getAuctionStatus: ticketId => api.get(`/bids/ticket/${ticketId}`).then(res => res.data),\n  getMyBids: () => api.get('/bids/my-bids').then(res => res.data)\n};\n\n// Admin API\nexport const adminAPI = {\n  getDashboard: () => api.get('/admin/dashboard').then(res => res.data),\n  getUsers: params => api.get('/admin/users', {\n    params\n  }).then(res => res.data),\n  updateUser: (id, data) => api.put(`/admin/users/${id}`, data).then(res => res.data),\n  getEvents: params => api.get('/admin/events', {\n    params\n  }).then(res => res.data),\n  getTickets: params => api.get('/admin/tickets', {\n    params\n  }).then(res => res.data),\n  getPurchases: params => api.get('/admin/purchases', {\n    params\n  }).then(res => res.data),\n  getRevenueAnalytics: params => api.get('/admin/analytics/revenue', {\n    params\n  }).then(res => res.data)\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","authAPI","register","data","post","then","res","login","getCurrentUser","get","eventsAPI","getAll","params","getById","id","update","put","delete","getCategories","ticketsAPI","purchase","getMyTickets","getMyListings","bidsAPI","placeBid","ticketId","getAuctionStatus","getMyBids","adminAPI","getDashboard","getUsers","updateUser","getEvents","getTickets","getPurchases","getRevenueAnalytics"],"sources":["/Users/tanishshah/Desktop/Fastpass/client/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport {\n  ApiResponse,\n  User,\n  Event,\n  Ticket,\n  Bid,\n  Purchase,\n  DashboardStats,\n  LoginRequest,\n  RegisterRequest,\n  CreateEventRequest,\n  CreateTicketRequest,\n  PlaceBidRequest,\n  PurchaseTicketRequest,\n  PaginatedResponse\n} from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Response interceptor to handle errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Auth API\nexport const authAPI = {\n  register: (data: RegisterRequest): Promise<ApiResponse<{ user: User; token: string }>> =>\n    api.post('/auth/register', data).then(res => res.data),\n\n  login: (data: LoginRequest): Promise<ApiResponse<{ user: User; token: string }>> =>\n    api.post('/auth/login', data).then(res => res.data),\n\n  getCurrentUser: (): Promise<ApiResponse<User>> =>\n    api.get('/auth/me').then(res => res.data),\n};\n\n// Events API\nexport const eventsAPI = {\n  getAll: (params?: { page?: number; limit?: number; category?: string; search?: string }): Promise<ApiResponse<PaginatedResponse<Event>>> =>\n    api.get('/events', { params }).then(res => res.data),\n\n  getById: (id: string): Promise<ApiResponse<Event>> =>\n    api.get(`/events/${id}`).then(res => res.data),\n\n  create: (data: CreateEventRequest): Promise<ApiResponse<Event>> =>\n    api.post('/events', data).then(res => res.data),\n\n  update: (id: string, data: Partial<CreateEventRequest>): Promise<ApiResponse<Event>> =>\n    api.put(`/events/${id}`, data).then(res => res.data),\n\n  delete: (id: string): Promise<ApiResponse<void>> =>\n    api.delete(`/events/${id}`).then(res => res.data),\n\n  getCategories: (): Promise<ApiResponse<string[]>> =>\n    api.get('/events/categories').then(res => res.data),\n};\n\n// Tickets API\nexport const ticketsAPI = {\n  getAll: (params?: { page?: number; limit?: number; status?: string; eventId?: string }): Promise<ApiResponse<PaginatedResponse<Ticket>>> =>\n    api.get('/tickets', { params }).then(res => res.data),\n\n  getById: (id: string): Promise<ApiResponse<Ticket>> =>\n    api.get(`/tickets/${id}`).then(res => res.data),\n\n  create: (data: CreateTicketRequest): Promise<ApiResponse<Ticket>> =>\n    api.post('/tickets', data).then(res => res.data),\n\n  update: (id: string, data: Partial<CreateTicketRequest>): Promise<ApiResponse<Ticket>> =>\n    api.put(`/tickets/${id}`, data).then(res => res.data),\n\n  delete: (id: string): Promise<ApiResponse<void>> =>\n    api.delete(`/tickets/${id}`).then(res => res.data),\n\n  purchase: (id: string, data: PurchaseTicketRequest): Promise<ApiResponse<Purchase>> =>\n    api.post(`/tickets/${id}/purchase`, data).then(res => res.data),\n\n  getMyTickets: (): Promise<ApiResponse<Ticket[]>> =>\n    api.get('/tickets/my').then(res => res.data),\n\n  getMyListings: (): Promise<ApiResponse<Ticket[]>> =>\n    api.get('/tickets/my-listings').then(res => res.data),\n};\n\n// Bids API\nexport const bidsAPI = {\n  placeBid: (ticketId: string, data: PlaceBidRequest): Promise<ApiResponse<Bid>> =>\n    api.post(`/bids/${ticketId}`, data).then(res => res.data),\n\n  getAuctionStatus: (ticketId: string): Promise<ApiResponse<any>> =>\n    api.get(`/bids/ticket/${ticketId}`).then(res => res.data),\n\n  getMyBids: (): Promise<ApiResponse<Bid[]>> =>\n    api.get('/bids/my-bids').then(res => res.data),\n};\n\n// Admin API\nexport const adminAPI = {\n  getDashboard: (): Promise<ApiResponse<DashboardStats>> =>\n    api.get('/admin/dashboard').then(res => res.data),\n\n  getUsers: (params?: { page?: number; limit?: number; search?: string }): Promise<ApiResponse<PaginatedResponse<User>>> =>\n    api.get('/admin/users', { params }).then(res => res.data),\n\n  updateUser: (id: string, data: Partial<User>): Promise<ApiResponse<User>> =>\n    api.put(`/admin/users/${id}`, data).then(res => res.data),\n\n  getEvents: (params?: { page?: number; limit?: number; category?: string }): Promise<ApiResponse<PaginatedResponse<Event>>> =>\n    api.get('/admin/events', { params }).then(res => res.data),\n\n  getTickets: (params?: { page?: number; limit?: number; status?: string; eventId?: string }): Promise<ApiResponse<PaginatedResponse<Ticket>>> =>\n    api.get('/admin/tickets', { params }).then(res => res.data),\n\n  getPurchases: (params?: { page?: number; limit?: number; status?: string }): Promise<ApiResponse<PaginatedResponse<Purchase>>> =>\n    api.get('/admin/purchases', { params }).then(res => res.data),\n\n  getRevenueAnalytics: (params?: { period?: string }): Promise<ApiResponse<any>> =>\n    api.get('/admin/analytics/revenue', { params }).then(res => res.data),\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}