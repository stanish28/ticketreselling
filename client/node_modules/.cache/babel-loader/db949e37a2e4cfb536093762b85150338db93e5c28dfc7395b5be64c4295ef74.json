{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from'react';import{authAPI}from'../services/api.ts';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{const initializeAuth=async()=>{const token=localStorage.getItem('token');const savedUser=localStorage.getItem('user');if(token&&savedUser){try{const response=await authAPI.getCurrentUser();if(response.success&&response.data){setUser(response.data);}else{// Token is invalid, clear storage\nlocalStorage.removeItem('token');localStorage.removeItem('user');}}catch(error){console.error('Failed to get current user:',error);localStorage.removeItem('token');localStorage.removeItem('user');}}setLoading(false);};initializeAuth();},[]);const login=async(email,password)=>{try{const response=await authAPI.login({email,password});if(response.success&&response.data){const{user,token}=response.data;localStorage.setItem('token',token);localStorage.setItem('user',JSON.stringify(user));setUser(user);}else{throw new Error(response.error||'Login failed');}}catch(error){console.error('Login error:',error);// Re-throw the error to be handled by the calling component\nthrow error;}};const register=async(email,name,password,phone)=>{try{const response=await authAPI.register({email,name,password,phone});if(response.success&&response.data){const{user,token}=response.data;localStorage.setItem('token',token);localStorage.setItem('user',JSON.stringify(user));setUser(user);}else{throw new Error(response.error||'Registration failed');}}catch(error){console.error('Registration error:',error);throw error;}};const logout=()=>{localStorage.removeItem('token');localStorage.removeItem('user');setUser(null);};const updateUser=updatedUser=>{setUser(updatedUser);localStorage.setItem('user',JSON.stringify(updatedUser));};const value={user,loading,login,register,logout,updateUser};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","authAPI","jsx","_jsx","AuthContext","undefined","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","initializeAuth","token","localStorage","getItem","savedUser","response","getCurrentUser","success","data","removeItem","error","console","login","email","password","setItem","JSON","stringify","register","name","phone","logout","updateUser","updatedUser","value","Provider"],"sources":["/Users/tanishshah/Desktop/Fastpass/client/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { User } from '../types';\nimport { authAPI } from '../services/api.ts';\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, name: string, password: string, phone?: string) => Promise<void>;\n  logout: () => void;\n  updateUser: (user: User) => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const initializeAuth = async () => {\n      const token = localStorage.getItem('token');\n      const savedUser = localStorage.getItem('user');\n\n      if (token && savedUser) {\n        try {\n          const response = await authAPI.getCurrentUser();\n          if (response.success && response.data) {\n            setUser(response.data);\n          } else {\n            // Token is invalid, clear storage\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n          }\n        } catch (error) {\n          console.error('Failed to get current user:', error);\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n        }\n      }\n      setLoading(false);\n    };\n\n    initializeAuth();\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    try {\n      const response = await authAPI.login({ email, password });\n      if (response.success && response.data) {\n        const { user, token } = response.data;\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        setUser(user);\n      } else {\n        throw new Error(response.error || 'Login failed');\n      }\n    } catch (error: any) {\n      console.error('Login error:', error);\n      // Re-throw the error to be handled by the calling component\n      throw error;\n    }\n  };\n\n  const register = async (email: string, name: string, password: string, phone?: string) => {\n    try {\n      const response = await authAPI.register({ email, name, password, phone });\n      if (response.success && response.data) {\n        const { user, token } = response.data;\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        setUser(user);\n      } else {\n        throw new Error(response.error || 'Registration failed');\n      }\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUser(null);\n  };\n\n  const updateUser = (updatedUser: User) => {\n    setUser(updatedUser);\n    localStorage.setItem('user', JSON.stringify(updatedUser));\n  };\n\n  const value: AuthContextType = {\n    user,\n    loading,\n    login,\n    register,\n    logout,\n    updateUser,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}